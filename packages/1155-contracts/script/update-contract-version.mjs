import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const makePackageVersionFile = async (version) => {
  console.log('Updating contract version to', version);

  const packageVersionCode = `// This file is automatically generated by code; do not manually update
// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import { IVersionedContract } from "../interfaces/IVersionedContract.sol";

/// @title ContractVersionBase
/// @notice Base contract for versioning contracts
contract ContractVersionBase is IVersionedContract {
    /// @notice The version of the contract
    function contractVersion() external pure override returns (string memory) {
        return "${version}";
    }
}
`;

  const filePath = path.join(__dirname, '..', 'src', 'version', 'ContractVersionBase.sol');

  console.log('Generated contract version code:', packageVersionCode);
  console.log('Writing file to', filePath);

  await fs.writeFile(filePath, packageVersionCode);
};

const getVersion = async () => {
  const packageJsonPath = path.join(__dirname, '..', 'package.json');
  const packageJsonData = await fs.readFile(packageJsonPath, 'utf8');
  const packageJson = JSON.parse(packageJsonData);

  return packageJson.version;
};

const main = async () => {
  const version = await getVersion();
  await makePackageVersionFile(version);
};

main().catch(error => {
  console.error('Error occurred:', error);
  process.exit(1);
});
